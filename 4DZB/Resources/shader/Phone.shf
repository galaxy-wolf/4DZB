#version 440
in vec3 worldPos;
in vec3 worldN;
in vec2 uv;

layout (location = 0) out vec4 worldPosition;
layout (location = 1) out vec4 diffuseAndSpec;
layout (location = 2) out vec4 ambient;

struct LightInfo{
	vec3 Position;
	vec3 La;
	vec3 Ld;
	vec3 Ls;
};

struct MaterialInfo{
	vec3 Ka;
    sampler2D ambientTex;
	vec3 Kd;
    sampler2D diffuseTex;
	vec3 Ks;
    sampler2D specTex;
	float Shininess;
};


uniform LightInfo Light;
uniform MaterialInfo Material;
uniform vec3 cameraPos;
void phongModel(vec3 position, vec3 norm)
{
    vec3 N = normalize (norm);
	vec3 L = normalize(vec3(Light.Position - position));
	vec3 V = normalize(cameraPos - position);
    float LDotN = dot(L, N) ;
	vec3 R = 2*LDotN*N - L;


    vec3 ka = Material.Ka;
    if (isnan(ka.x))
    {
        ka = texture(Material.ambientTex, uv).rgb;
    }
    vec3 kd = Material.Kd;
    if (isnan(kd.x))
    {
        kd = texture(Material.diffuseTex, uv).rgb;
    }
    vec3 ks = Material.Ks;
    if (isnan(ks.x)){
        ks = texture(Material.specTex, uv).rgb;
    }
	
	ambient = vec4(Light.La * ka, 1.0f);
	
	vec3 diffuse = Light.Ld * kd * max(LDotN, 0);
	vec3 spec = vec3(0.0);
 	
    spec = Light.Ls * ks * pow(max(dot(R, V), 0.0), Material.Shininess);


	diffuseAndSpec = vec4(diffuse + spec, 1.0f);
}

void main()
{
    worldPosition = vec4(worldPos, 1.0f);


	phongModel(worldPos, worldN);
}
