#version 440

out vec4 FragColor;

in vec2 uv;
uniform sampler2D shadowMap;
uniform sampler2D G_Buffer0;
uniform sampler2D G_Buffer1;
uniform sampler2D G_Buffer2;
uniform sampler2D G_Buffer3;

struct LightInfo{
	//vec3 Position;
	vec3 La;
	vec3 Ld;
	vec3 Ls;
};

uniform vec3 cameraPos;
uniform LightInfo Light;
uniform sampler2D LightSamplePos;
uniform uvec2 LightSampleSize;
void main()
{
    float Intensity = 1- texture(shadowMap, uv).x;
    if (isnan(Intensity))
        discard;

    vec4 g0 = texture(G_Buffer0, uv);
    vec4 g1 = texture(G_Buffer1, uv);
    vec4 g2 = texture(G_Buffer2, uv);
    vec4 g3 = texture(G_Buffer3, uv);

    vec3 worldPosition = g0.xyz;
    vec3 worldNormal = g1.xyz;
    vec3 ka = g2.rgb;
    vec3 kd = g3.rgb;
    vec3 ks = vec3(g0.w, g1.w, g2.w);
    float shininess = g3.w;

    vec3 N = normalize (worldNormal);
    vec3 V = normalize(cameraPos - worldPosition);
    FragColor = vec4(0.0f, 0.0f, 0.0f, 0.0f);

    for (int i =0; i< LightSampleSize.x;  ++i)
        for (int j=0; j< LightSampleSize.y; ++j)
    {
	  vec3 samplePos = texture(LightSamplePos, vec2((i+0.5f)/64, (j+0.5f)/64)).xyz;
        vec3 L = normalize(samplePos - worldPosition);

        float LDotN = dot(L, N) ;
        vec3 R = 2*LDotN*N - L;

        vec3 ambient = Light.La * ka;	
        vec3 diffuse = Light.Ld * kd * max(LDotN, 0);
        vec3 spec = Light.Ls * ks * pow(max(dot(R, V), 0.0), shininess);
        FragColor += vec4(ambient + (diffuse + spec) * Intensity, 1.0f);
    }

    FragColor /= LightSampleSize.x * LightSampleSize.y;   
    
    // 只渲染阴影，没有光照
    //FragColor = vec4(Intensity, Intensity, Intensity, 1.0f);
    //FragColor = vec4(shininess, shininess, shininess, 1.0f);
}
